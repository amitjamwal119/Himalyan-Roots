{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///D:/Code/Mandav/DEM/Himalyan-Roots/src/Redux-Toolkit/slices/rooms/roomSlice.ts"],"sourcesContent":["import { Room } from \"@/types/Room\";\r\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\ninterface roomsState {\r\n    rooms: Room[];\r\n    selectedRoom: Room | null;  // field for slug\r\n    loading: boolean;\r\n    error: string | null;\r\n}\r\n\r\n// Initial State\r\nconst initialState: roomsState = {\r\n    rooms: [],\r\n    selectedRoom: null,     // field for slug\r\n    loading: false,\r\n    error: null,\r\n};\r\n\r\n// Create async thunk for GET Method - all the rooms\r\nexport const getRooms = createAsyncThunk<Room[]>(\"roomSlice/roomData\",\r\n    async (_, { rejectWithValue }) => {\r\n        try {\r\n            const response = await axios.get<Room[]>(`${process.env.NEXT_PUBLIC_API_URL as string}/rooms`);\r\n            return response.data;\r\n        }\r\n        catch (error: any) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    });\r\n\r\n\r\n// Create async thunk for GET method - single room details\r\n\r\nexport const getRoomBySlug = createAsyncThunk(\"roomSlice/roomSlugData\",\r\n    async (slug: string, { rejectWithValue }) => {\r\n        try {\r\n            const res = await axios.get<Room[]>(`${process.env.NEXT_PUBLIC_API_URL}/rooms?slug=${slug}`);\r\n            return res.data[0]; // assuming API returns an array\r\n        }\r\n        catch (error: any) {\r\n            return rejectWithValue(error.message);\r\n\r\n        }\r\n    }\r\n)\r\n\r\n// Create slice\r\nconst roomSlice = createSlice({\r\n    name: \"rooms\",\r\n    initialState,\r\n    reducers: {},               //Used to add custom reducers if any\r\n    extraReducers: (builder) => {\r\n        builder\r\n            //Cases for Whole Rooms\r\n            .addCase(getRooms.pending, (state) => {\r\n                state.loading = true;\r\n                state.error = null;\r\n            })\r\n            .addCase(getRooms.fulfilled, (state, action: PayloadAction<Room[]>) => {\r\n                state.loading = false;\r\n                state.rooms = action.payload;\r\n            })\r\n            .addCase(getRooms.rejected, (state, action) => {\r\n                state.loading = false;\r\n                state.error = action.payload as string;\r\n            })\r\n\r\n            // Cases for perticular room\r\n\r\n            .addCase(getRoomBySlug.pending, (state) => {\r\n                state.loading = true;\r\n                state.error = null;\r\n            })\r\n            .addCase(getRoomBySlug.fulfilled, (state, action: PayloadAction<Room>) => {\r\n                state.loading = false;\r\n                state.selectedRoom = action.payload;\r\n            })\r\n            .addCase(getRoomBySlug.rejected, (state, action) => {\r\n                state.loading = false;\r\n                state.error = action.payload as string;\r\n            })\r\n    },\r\n});\r\n\r\n// Export reducer\r\nexport default roomSlice.reducer;"],"names":[],"mappings":";;;;;;;;AACA;AACA;;;AASA,gBAAgB;AAChB,MAAM,eAA2B;IAC7B,OAAO,EAAE;IACT,cAAc;IACd,SAAS;IACT,OAAO;AACX;AAGO,MAAM,WAAW,IAAA,oOAAgB,EAAS,sBAC7C,OAAO,GAAG,EAAE,eAAe,EAAE;IACzB,IAAI;QACA,MAAM,WAAW,MAAM,qKAAK,CAAC,GAAG,CAAS,6DAA6C,MAAM,CAAC;QAC7F,OAAO,SAAS,IAAI;IACxB,EACA,OAAO,OAAY;QACf,OAAO,gBAAgB,MAAM,OAAO;IACxC;AACJ;AAKG,MAAM,gBAAgB,IAAA,oOAAgB,EAAC,0BAC1C,OAAO,MAAc,EAAE,eAAe,EAAE;IACpC,IAAI;QACA,MAAM,MAAM,MAAM,qKAAK,CAAC,GAAG,CAAS,6DAAmC,YAAY,EAAE,MAAM;QAC3F,OAAO,IAAI,IAAI,CAAC,EAAE,EAAE,gCAAgC;IACxD,EACA,OAAO,OAAY;QACf,OAAO,gBAAgB,MAAM,OAAO;IAExC;AACJ;AAGJ,eAAe;AACf,MAAM,YAAY,IAAA,+NAAW,EAAC;IAC1B,MAAM;IACN;IACA,UAAU,CAAC;IACX,eAAe,CAAC;QACZ,OACI,uBAAuB;SACtB,OAAO,CAAC,SAAS,OAAO,EAAE,CAAC;YACxB,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;QAClB,GACC,OAAO,CAAC,SAAS,SAAS,EAAE,CAAC,OAAO;YACjC,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG,OAAO,OAAO;QAChC,GACC,OAAO,CAAC,SAAS,QAAQ,EAAE,CAAC,OAAO;YAChC,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG,OAAO,OAAO;QAChC,EAEA,4BAA4B;SAE3B,OAAO,CAAC,cAAc,OAAO,EAAE,CAAC;YAC7B,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;QAClB,GACC,OAAO,CAAC,cAAc,SAAS,EAAE,CAAC,OAAO;YACtC,MAAM,OAAO,GAAG;YAChB,MAAM,YAAY,GAAG,OAAO,OAAO;QACvC,GACC,OAAO,CAAC,cAAc,QAAQ,EAAE,CAAC,OAAO;YACrC,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG,OAAO,OAAO;QAChC;IACR;AACJ;uCAGe,UAAU,OAAO","debugId":null}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///D:/Code/Mandav/DEM/Himalyan-Roots/src/Redux-Toolkit/slices/gallary/gallarySlice.ts"],"sourcesContent":["import { GallaryItem } from \"@/types/Gallary\";\r\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\n\r\ninterface gallaryState {\r\n    gallary: GallaryItem[];\r\n    loading: boolean;\r\n    error: string | null;\r\n}\r\n\r\n// Initial State\r\nconst initialState: gallaryState = {\r\n    gallary: [],\r\n    loading: false,\r\n    error: null,\r\n}\r\n\r\n// Create async thunk for GET method \r\nexport const getGallary = createAsyncThunk<GallaryItem[]>(\"gallarySlice/fetchGallary\",\r\n    async (_, { rejectWithValue }) => {\r\n        try {\r\nconst response = await axios.get<GallaryItem[]>(`${process.env.NEXT_PUBLIC_API_URL as string}/gallary`);\r\n            return response.data;\r\n        }\r\n        catch (error: any) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n// Create slice\r\nconst gallarySlice = createSlice({\r\n    name: \"gallary\",\r\n    initialState,\r\n    reducers: {},  //Used to add custom reducers if any\r\n    extraReducers: (builder) => {\r\n        builder\r\n        .addCase(getGallary.pending, (state) => {\r\n            state.loading = true;\r\n            state.error = null;\r\n        })\r\n        .addCase(getGallary.fulfilled, (state, action: PayloadAction<GallaryItem[]>) => {\r\n            state.loading = false;\r\n            state.gallary = action.payload;\r\n        })\r\n        .addCase(getGallary.rejected, (state, action) => {\r\n            state.loading = false;\r\n            state.error = action.payload as string;\r\n        })\r\n    }\r\n});\r\n\r\n// Export reducer\r\nexport default gallarySlice.reducer;\r\n\r\n"],"names":[],"mappings":";;;;;;AACA;AACA;;;AASA,gBAAgB;AAChB,MAAM,eAA6B;IAC/B,SAAS,EAAE;IACX,SAAS;IACT,OAAO;AACX;AAGO,MAAM,aAAa,IAAA,oOAAgB,EAAgB,6BACtD,OAAO,GAAG,EAAE,eAAe,EAAE;IACzB,IAAI;QACZ,MAAM,WAAW,MAAM,qKAAK,CAAC,GAAG,CAAgB,6DAA6C,QAAQ,CAAC;QAC1F,OAAO,SAAS,IAAI;IACxB,EACA,OAAO,OAAY;QACf,OAAO,gBAAgB,MAAM,OAAO;IACxC;AACJ;AAGJ,eAAe;AACf,MAAM,eAAe,IAAA,+NAAW,EAAC;IAC7B,MAAM;IACN;IACA,UAAU,CAAC;IACX,eAAe,CAAC;QACZ,QACC,OAAO,CAAC,WAAW,OAAO,EAAE,CAAC;YAC1B,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;QAClB,GACC,OAAO,CAAC,WAAW,SAAS,EAAE,CAAC,OAAO;YACnC,MAAM,OAAO,GAAG;YAChB,MAAM,OAAO,GAAG,OAAO,OAAO;QAClC,GACC,OAAO,CAAC,WAAW,QAAQ,EAAE,CAAC,OAAO;YAClC,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG,OAAO,OAAO;QAChC;IACJ;AACJ;uCAGe,aAAa,OAAO","debugId":null}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":["file:///D:/Code/Mandav/DEM/Himalyan-Roots/src/Redux-Toolkit/slices/experiences/experiencesSlice.ts"],"sourcesContent":["import { Experience } from \"@/types/Experiences\";\r\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\n\r\ninterface expState {\r\n    experience: Experience[];\r\n    loading: boolean;\r\n    error: string | null;\r\n}\r\n\r\n// Initial State\r\nconst initialState: expState = {\r\n    experience: [],\r\n    loading: false,\r\n    error: null,\r\n}\r\n\r\n// Create async thunk for GET method\r\nexport const getExperiences = createAsyncThunk<Experience[]>(\"experienceSlice/fetchExperience\",\r\n    async (_, { rejectWithValue }) => {\r\n        try {\r\n            const response = await axios.get<Experience[]>(`${process.env.NEXT_PUBLIC_API_URL as string}/experiences`);\r\n            return response.data;\r\n        } catch (error: any) {\r\n            return rejectWithValue(error.message);\r\n\r\n        }\r\n    }\r\n);\r\n\r\n//Create Slice\r\nconst experienceSlice = createSlice({\r\n    name: \"experience\",\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n        .addCase(getExperiences.pending, (state) => {\r\n            state.loading = true;\r\n            state.error = null;\r\n        })\r\n        .addCase(getExperiences.fulfilled, (state, action: PayloadAction<Experience[]>) => {\r\n            state.loading = true;\r\n            state.experience = action.payload;\r\n        })\r\n        .addCase(getExperiences.rejected, (state, action) => {\r\n            state.loading = false;\r\n            state.error = action.payload as string;\r\n        })\r\n    }\r\n});\r\n\r\n// Export reducer\r\nexport default experienceSlice.reducer;"],"names":[],"mappings":";;;;;;AACA;AACA;;;AASA,gBAAgB;AAChB,MAAM,eAAyB;IAC3B,YAAY,EAAE;IACd,SAAS;IACT,OAAO;AACX;AAGO,MAAM,iBAAiB,IAAA,oOAAgB,EAAe,mCACzD,OAAO,GAAG,EAAE,eAAe,EAAE;IACzB,IAAI;QACA,MAAM,WAAW,MAAM,qKAAK,CAAC,GAAG,CAAe,6DAA6C,YAAY,CAAC;QACzG,OAAO,SAAS,IAAI;IACxB,EAAE,OAAO,OAAY;QACjB,OAAO,gBAAgB,MAAM,OAAO;IAExC;AACJ;AAGJ,cAAc;AACd,MAAM,kBAAkB,IAAA,+NAAW,EAAC;IAChC,MAAM;IACN;IACA,UAAU,CAAC;IACX,eAAe,CAAC;QACZ,QACC,OAAO,CAAC,eAAe,OAAO,EAAE,CAAC;YAC9B,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;QAClB,GACC,OAAO,CAAC,eAAe,SAAS,EAAE,CAAC,OAAO;YACvC,MAAM,OAAO,GAAG;YAChB,MAAM,UAAU,GAAG,OAAO,OAAO;QACrC,GACC,OAAO,CAAC,eAAe,QAAQ,EAAE,CAAC,OAAO;YACtC,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG,OAAO,OAAO;QAChC;IACJ;AACJ;uCAGe,gBAAgB,OAAO","debugId":null}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":["file:///D:/Code/Mandav/DEM/Himalyan-Roots/src/Redux-Toolkit/store/store.ts"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\r\nimport roomsReducer from \"../slices/rooms/roomSlice\";\r\nimport gallaryReducer from \"../slices/gallary/gallarySlice\";\r\nimport experienceReducer from \"../slices/experiences/experiencesSlice\";\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    rooms: roomsReducer,\r\n    gallary: gallaryReducer,\r\n    experiences: experienceReducer,\r\n  }\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAGO,MAAM,QAAQ,IAAA,kOAAc,EAAC;IAClC,SAAS;QACP,OAAO,uLAAY;QACnB,SAAS,4LAAc;QACvB,aAAa,oMAAiB;IAChC;AACF","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///D:/Code/Mandav/DEM/Himalyan-Roots/src/Redux-Toolkit/providers/ReduxProvider.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"../store/store\";\r\n\r\nexport default function ReduxProvider({ children }: { children: React.ReactNode }) {\r\n  return <Provider store={store}>{children}</Provider>;\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAKe,SAAS,cAAc,EAAE,QAAQ,EAAiC;IAC/E,qBAAO,mQAAC,0LAAQ;QAAC,OAAO,uKAAK;kBAAG;;;;;;AAClC","debugId":null}}]
}